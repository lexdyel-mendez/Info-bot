import random
import Read_file as read


def make_dictionary(words, context):
    """Creates a dictionary which will store all the words in the dataset and all the perceived next words
        Parameters:
            words: an array of all (non unique) words  in the dataset
            context: quantity if words that the dictionary uses to create references"""
    dictionary = {}
    index = 0

    for word in words[index:]:
        key = ' '.join(words[index - context:index])
        if key in dictionary:
            dictionary[key].append(word)
        else:
            dictionary[key] = [word]

        index += 1
    return dictionary


def makestring(start, dictionary, length):
    startword = make_dictionary(start, 1)
    reference_words = random.choice(list(startword.keys())).split(' ')  # random starting words
    string = ' '.join(reference_words) + ' '

    for i in range(length):
        try:
            key = ' '.join(reference_words)
            newword = random.choice(dictionary[key])
            string += newword + ' '
            if (newword == '.'): break
            for word in range(len(reference_words)):
                reference_words[word] = reference_words[(word + 1) % len(reference_words)]
            reference_words[-1] = newword

        except KeyError:
            return string
    return string


def data_saver(eventDate, eventName, rating, givenString,labeled):
    '''
    Saves the data into the textfile Saved_data for record keeping.
    :param eventDate: the given input as the date of the event
    :param eventName: the given input as the name of the event
    :param givenString: the string generated by the AI
    '''
    filepath = open('Saved_data.txt', 'a+')
    filepath.write('The date of the event is: ' + str(eventDate) +
                   '\nThe name of the event is: ' + str(eventName) +
                   '\nThe rate of the event is:' + str(rating) +
                   '\nThe given string is: ' + str(givenString) +
                   '\nThe labeled data is: ' + labeled+'\n\n'
                   )
    filepath.close()


def input_checker(question, valueName):
    '''
    Method that gets a question and return the value of the question
    If the value is N/A, it does not print anything.
    :param question: String holding the question that is going to be asked
    :param valueName: String holding the name of the value
    :return: value
    '''
    value = input(str(question) + ' (N/A if it does no apply) ')
    if value.upper() != 'N/A':
        print("The " + valueName + " is: " + value)
    return value


def input_date():
    '''
    Method that asks the user for the date of the event.
    :return: The event's date, only if its not N/A
    '''
    date = input_checker("What date is the event?", 'day of the event')
    return date

def input_event():
    '''
    Method in charge of asking the user for the topic of the event
    :return: The event name
    '''
    event = input_checker("What's the name of the event?", "event")
    return  event

def post_rate():
    '''
    This method is will ask the user if for a raiting of the post,
    dependind og the answer, it will decide if to save or not.
    The saved data can be later used for reinforcement learning.
    :return: Value holding the given rating.
    '''
    rate = input("What rating would you give to this post?(0-5) ")
    try:
        value = int(rate)
        if value < 0 or value > 5:
            print("Rating most be a number between 0 and 5")
            post_rate()
        return  value
    except ValueError:
        print("Rating most be an integer between 0 and 5")
        post_rate()

stringToOutput = ''         # Global variable that holds the string generated by the AI.


def interface(date,eventName):
    '''
    This method works with what happens with each
    input that is asked to the user.
    :param date: The input date given by the user.
    '''
    global stringToOutput
    label = ['[date]','[event]']
    words = read.read_file()
    startingWords = read.readStarting()
    rule = make_dictionary(words, 1)
    string = makestring(startingWords, rule, 30)
    if date.upper() != 'N/A' and eventName.upper() != 'N/A':
        if all(t in string for t in label):
            string = string.replace('[date]',date)
            string = string.replace('[event]', eventName)
            stringToOutput = string
            print (string)
        else:
            interface(date,eventName)
    if date.upper() == 'N/A' and eventName.upper() != 'N/A':
        if '[date]' in string or '[event]' not in string:
            interface(date,eventName)

        else:
            string = string.replace('[event]', eventName)
            stringToOutput = string
            print (string)
    if date.upper() != 'N/A' and eventName.upper() == 'N/A':
        if '[event]' in string or '[date]' not in string:
            interface(date,eventName)

        else:
            string = string.replace('[date]', date)
            stringToOutput = string
            print(string)
    if date.upper() == 'N/A' and eventName.upper() == 'N/A':
        if all (t in string for t in label):
            interface(date,eventName)
        else:
            stringToOutput = string
            print(string)


def label_data(date,eventName,string):
    '''
    Generates a string with the generated data, but labeled with its respective labels.
    :param date: Given data of the event
    :param eventName: Given name of the event
    :param string: Generated text by the model
    :return: The labeled string
    '''
    string = string.replace(str(date),'[date]')
    string = string.replace(str(eventName),'[eventname]')
    return  string


if __name__ == '__main__':
    givenDate = input_date()
    eventName = input_event()
    interface(givenDate,eventName)
    print(givenDate)
    print(eventName)

    rate = post_rate()
    if rate >= 4:
        labels = label_data(givenDate,eventName,stringToOutput)
        data_saver(givenDate, eventName, rate, stringToOutput, labels)
